package dev.ngai.fantastic.data.source.local.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dev.ngai.fantastic.data.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OauthPwd = new Property(0, String.class, "oauthPwd", false, "OAUTH_PWD");
        public final static Property LoginUnique = new Property(1, String.class, "loginUnique", false, "LOGIN_UNIQUE");
        public final static Property GoldCoin = new Property(2, int.class, "goldCoin", false, "GOLD_COIN");
        public final static Property Balance = new Property(3, int.class, "balance", false, "BALANCE");
        public final static Property Score = new Property(4, int.class, "score", false, "SCORE");
        public final static Property PrivateId = new Property(5, String.class, "privateId", false, "PRIVATE_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"OAUTH_PWD\" TEXT," + // 0: oauthPwd
                "\"LOGIN_UNIQUE\" TEXT," + // 1: loginUnique
                "\"GOLD_COIN\" INTEGER NOT NULL ," + // 2: goldCoin
                "\"BALANCE\" INTEGER NOT NULL ," + // 3: balance
                "\"SCORE\" INTEGER NOT NULL ," + // 4: score
                "\"PRIVATE_ID\" TEXT);"); // 5: privateId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String oauthPwd = entity.getOauthPwd();
        if (oauthPwd != null) {
            stmt.bindString(1, oauthPwd);
        }
 
        String loginUnique = entity.getLoginUnique();
        if (loginUnique != null) {
            stmt.bindString(2, loginUnique);
        }
        stmt.bindLong(3, entity.getGoldCoin());
        stmt.bindLong(4, entity.getBalance());
        stmt.bindLong(5, entity.getScore());
 
        String privateId = entity.getPrivateId();
        if (privateId != null) {
            stmt.bindString(6, privateId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String oauthPwd = entity.getOauthPwd();
        if (oauthPwd != null) {
            stmt.bindString(1, oauthPwd);
        }
 
        String loginUnique = entity.getLoginUnique();
        if (loginUnique != null) {
            stmt.bindString(2, loginUnique);
        }
        stmt.bindLong(3, entity.getGoldCoin());
        stmt.bindLong(4, entity.getBalance());
        stmt.bindLong(5, entity.getScore());
 
        String privateId = entity.getPrivateId();
        if (privateId != null) {
            stmt.bindString(6, privateId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // oauthPwd
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUnique
            cursor.getInt(offset + 2), // goldCoin
            cursor.getInt(offset + 3), // balance
            cursor.getInt(offset + 4), // score
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // privateId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setOauthPwd(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoginUnique(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoldCoin(cursor.getInt(offset + 2));
        entity.setBalance(cursor.getInt(offset + 3));
        entity.setScore(cursor.getInt(offset + 4));
        entity.setPrivateId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
