package dev.ngai.fantastic.data.source.local.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import dev.ngai.fantastic.data.Collect;
import dev.ngai.fantastic.data.Discover;
import dev.ngai.fantastic.data.FeedBack;
import dev.ngai.fantastic.data.User;
import dev.ngai.fantastic.data.UserPrivate;

import dev.ngai.fantastic.data.source.local.dao.CollectDao;
import dev.ngai.fantastic.data.source.local.dao.DiscoverDao;
import dev.ngai.fantastic.data.source.local.dao.FeedBackDao;
import dev.ngai.fantastic.data.source.local.dao.UserDao;
import dev.ngai.fantastic.data.source.local.dao.UserPrivateDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig collectDaoConfig;
    private final DaoConfig discoverDaoConfig;
    private final DaoConfig feedBackDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig userPrivateDaoConfig;

    private final CollectDao collectDao;
    private final DiscoverDao discoverDao;
    private final FeedBackDao feedBackDao;
    private final UserDao userDao;
    private final UserPrivateDao userPrivateDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        collectDaoConfig = daoConfigMap.get(CollectDao.class).clone();
        collectDaoConfig.initIdentityScope(type);

        discoverDaoConfig = daoConfigMap.get(DiscoverDao.class).clone();
        discoverDaoConfig.initIdentityScope(type);

        feedBackDaoConfig = daoConfigMap.get(FeedBackDao.class).clone();
        feedBackDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        userPrivateDaoConfig = daoConfigMap.get(UserPrivateDao.class).clone();
        userPrivateDaoConfig.initIdentityScope(type);

        collectDao = new CollectDao(collectDaoConfig, this);
        discoverDao = new DiscoverDao(discoverDaoConfig, this);
        feedBackDao = new FeedBackDao(feedBackDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        userPrivateDao = new UserPrivateDao(userPrivateDaoConfig, this);

        registerDao(Collect.class, collectDao);
        registerDao(Discover.class, discoverDao);
        registerDao(FeedBack.class, feedBackDao);
        registerDao(User.class, userDao);
        registerDao(UserPrivate.class, userPrivateDao);
    }
    
    public void clear() {
        collectDaoConfig.clearIdentityScope();
        discoverDaoConfig.clearIdentityScope();
        feedBackDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        userPrivateDaoConfig.clearIdentityScope();
    }

    public CollectDao getCollectDao() {
        return collectDao;
    }

    public DiscoverDao getDiscoverDao() {
        return discoverDao;
    }

    public FeedBackDao getFeedBackDao() {
        return feedBackDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public UserPrivateDao getUserPrivateDao() {
        return userPrivateDao;
    }

}
