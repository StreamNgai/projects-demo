package dev.ngai.fantastic.data.source.local.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dev.ngai.fantastic.data.FeedBack;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FEED_BACK".
*/
public class FeedBackDao extends AbstractDao<FeedBack, Long> {

    public static final String TABLENAME = "FEED_BACK";

    /**
     * Properties of entity FeedBack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LoginUnique = new Property(1, String.class, "loginUnique", false, "LOGIN_UNIQUE");
        public final static Property QuestionName = new Property(2, String.class, "questionName", false, "QUESTION_NAME");
        public final static Property QuestionContent = new Property(3, String.class, "questionContent", false, "QUESTION_CONTENT");
        public final static Property AnswerContent = new Property(4, String.class, "answerContent", false, "ANSWER_CONTENT");
    }


    public FeedBackDao(DaoConfig config) {
        super(config);
    }
    
    public FeedBackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FEED_BACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOGIN_UNIQUE\" TEXT," + // 1: loginUnique
                "\"QUESTION_NAME\" TEXT," + // 2: questionName
                "\"QUESTION_CONTENT\" TEXT," + // 3: questionContent
                "\"ANSWER_CONTENT\" TEXT);"); // 4: answerContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEED_BACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FeedBack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String loginUnique = entity.getLoginUnique();
        if (loginUnique != null) {
            stmt.bindString(2, loginUnique);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(3, questionName);
        }
 
        String questionContent = entity.getQuestionContent();
        if (questionContent != null) {
            stmt.bindString(4, questionContent);
        }
 
        String answerContent = entity.getAnswerContent();
        if (answerContent != null) {
            stmt.bindString(5, answerContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FeedBack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String loginUnique = entity.getLoginUnique();
        if (loginUnique != null) {
            stmt.bindString(2, loginUnique);
        }
 
        String questionName = entity.getQuestionName();
        if (questionName != null) {
            stmt.bindString(3, questionName);
        }
 
        String questionContent = entity.getQuestionContent();
        if (questionContent != null) {
            stmt.bindString(4, questionContent);
        }
 
        String answerContent = entity.getAnswerContent();
        if (answerContent != null) {
            stmt.bindString(5, answerContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FeedBack readEntity(Cursor cursor, int offset) {
        FeedBack entity = new FeedBack( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUnique
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // questionContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // answerContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FeedBack entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginUnique(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQuestionContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswerContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FeedBack entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FeedBack entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FeedBack entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
