package dev.weihl.amazing.data.source.local.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import dev.weihl.amazing.data.bean.Discover;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCOVER".
*/
public class DiscoverDao extends AbstractDao<Discover, Void> {

    public static final String TABLENAME = "DISCOVER";

    /**
     * Properties of entity Discover.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Thumb = new Property(3, String.class, "thumb", false, "THUMB");
        public final static Property ThumbWh = new Property(4, String.class, "thumbWh", false, "THUMB_WH");
        public final static Property Tab = new Property(5, String.class, "tab", false, "TAB");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
        public final static Property Details = new Property(7, String.class, "details", false, "DETAILS");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
    }


    public DiscoverDao(DaoConfig config) {
        super(config);
    }
    
    public DiscoverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCOVER\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESC\" TEXT," + // 2: desc
                "\"THUMB\" TEXT," + // 3: thumb
                "\"THUMB_WH\" TEXT," + // 4: thumbWh
                "\"TAB\" TEXT," + // 5: tab
                "\"TAG\" TEXT," + // 6: tag
                "\"DETAILS\" TEXT," + // 7: details
                "\"DATE\" TEXT);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCOVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Discover entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String thumbWh = entity.getThumbWh();
        if (thumbWh != null) {
            stmt.bindString(5, thumbWh);
        }
 
        String tab = entity.getTab();
        if (tab != null) {
            stmt.bindString(6, tab);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(8, details);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Discover entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String thumbWh = entity.getThumbWh();
        if (thumbWh != null) {
            stmt.bindString(5, thumbWh);
        }
 
        String tab = entity.getTab();
        if (tab != null) {
            stmt.bindString(6, tab);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(8, details);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Discover readEntity(Cursor cursor, int offset) {
        Discover entity = new Discover( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbWh
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tab
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // details
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Discover entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbWh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTab(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDetails(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Discover entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Discover entity) {
        return null;
    }

    @Override
    public boolean hasKey(Discover entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
